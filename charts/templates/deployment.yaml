apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.service.name }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: {{ .Values.app.name }}
  ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: {{ .Values.service.ports }}

---

{{/* Ingress */}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ tpl .Values.ingress.name . }}
  namespace: {{ .Release.Namespace }}
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: 15m
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - {{ tpl .Values.ingress.host . }}
      secretName: {{ tpl .Values.ingress.tlsSecret . }}
  rules:
    - host: {{ tpl .Values.ingress.host . }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ tpl .Values.service.name . }}
                port:
                  number: 443

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.statefulset.name }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Values.statefulset.serviceName }}
  replicas: {{ .Values.statefulset.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
    spec:
      containers:
        - name: {{ .Values.statefulset.containerName }}
          image: io2060/vision-service:{{ .Chart.Version }}
          imagePullPolicy: {{ .Values.statefulset.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.ports }}
          env:
            {{- range $key, $value := .Values.statefulset.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          volumeMounts:
            - name: vision-service-storage
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: vision-service-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.statefulset.storage }}
kind: StatefulSet
metadata:
  name: {{ .Values.statefulset.name }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Values.statefulset.serviceName }}
  replicas: {{ .Values.statefulset.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
    spec:
      containers:
        - name: {{ .Values.statefulset.containerName }}
          image: io2060/vision-service:{{ .Chart.Version }}
          imagePullPolicy: {{ .Values.statefulset.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.ports }}
          env:
            {{- range $key, $value := .Values.statefulset.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          volumeMounts:
            - name: vision-service-storage
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: vision-service-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.statefulset.storage }}